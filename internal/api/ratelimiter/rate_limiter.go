package ratelimiter

import (
	"sync"
	"time"
)

const (
	// кол-во запросов для получения бана
	banLimit = 120

	// кол-во запросов для ошибки Too Many Requests
	tooManyReqsLimit = 60

	// время обновления счётчика
	limitPeriod = time.Minute
)

var (
	reqsPerMinute map[int64]uint8
	mu            sync.RWMutex
)

func init() {
	reqsPerMinute = make(map[int64]uint8)
	go reset()
}

// LimitRequest проверяет, разрешено ли пользователю
// совершать запросы, если запросов слишком много,
// пользователь получает ограничение доступа,
// если попытки запросов достигают 120 в минуту,
// пользователь лишается аккаунта.
//
// Входным параметром функции является идентификатор
// пользователя, сделавшего запрос.
//
// Выходным параметром функции является статус,
// означающий может ли пользователь совершить запрос:
// 1 - пользователь может совершить запрос;
// 0 - пользователь совершил много запросов,
// необходимо сделать паузу в запросах;
// -1 - пользователь совершил слишком много запросов
// и лишается аккаунта.
func LimitRequest(id int64) int8 {
	// увеличиваем кол-во запросов пользователя
	increment(id)

	// получаем кол-во запрсов
	reqs := get(id)

	// если меньше 60 запросов,
	// разрешаем сделать ещё
	if reqs < tooManyReqsLimit {
		return 1
	}

	// если от 60 до 120,
	// не разрешаем, выдаём ошибку Too Many Requests
	if reqs < banLimit {
		return 0
	}

	// 120 и больше - удаляем аккаунт
	return -1
}

// increment увеличивает кол-во
// запросов пользователя
// в течение определённого времени.
//
// Входным параметром функции является
// идентификатор пользователя, совершающего
// запрос.
func increment(id int64) {
	mu.Lock()
	reqsPerMinute[id]++
	mu.Unlock()
}

// get возвращает кол-во
// запросов пользователя
// в течение определённого времени.
//
// Входным параметром функции является
// идентификатор пользователя, совершающего
// запрос.
//
// Выходным параметром функции является
// количество запросов от пользователя
// за определённое время.
func get(id int64) uint8 {
	mu.RLock()
	defer mu.RUnlock()
	return reqsPerMinute[id]
}

// reset обнуляет кол-во
// запросов пользователей.
func reset() {
	for range time.Tick(limitPeriod) {
		mu.Lock()
		reqsPerMinute = make(map[int64]uint8)
		mu.Unlock()
	}
}
