name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/scam"
  SERVER_IMAGE_NAME: "scam-server"
  SERVER_CONTAINER_NAME: "server"
  POSTGRES_IMAGE_NAME: "scam-postgres"
  POSTGRES_CONTAINER_NAME: "pg"
  MIGRATOR_IMAGE_NAME: "scam-migrator"
  MIGRATOR_CONTAINER_NAME: "migrator"

jobs:
  images-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Create prod.env file
        run: |
          echo "HTTP_HOST=0.0.0.0" >> prod.env
          echo "HTTP_PORT=${{ secrets.HTTP_PORT }}" >> prod.env
          echo "PG_DSN=${{ secrets.PG_DSN }}" >> prod.env
          echo "PG_NAME=scam" >> prod.env
          echo "PG_USER=postgres" >> prod.env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> prod.env
          echo "PG_PORT=54321" >> prod.env
          echo "MIGRATION_DSN=${{ secrets.PG_DSN }}" >> prod.env
          echo "MIGRATION_DIR=./migrations" >> prod.env
          echo "ENV_FILE=prod.env" >> prod.env
          echo "PLATFORM=linux/amd64" >> prod.env
          echo "TG_BOT_TOKEN=${{ secrets.TG_BOT_TOKEN }}" >> prod.env
          echo "TG_CHAT_ID=${{ secrets.TG_CHAT_ID }}" >> prod.env
          echo "INIT_DATA_EXP_TIME=30" >> prod.env

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Images
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker compose --env-file prod.env build
          docker tag $REGISTRY/$SERVER_IMAGE_NAME:latest $REGISTRY/$SERVER_IMAGE_NAME:$TAG_NAME
          docker tag $REGISTRY/$POSTGRES_IMAGE_NAME:latest $REGISTRY/$POSTGRES_IMAGE_NAME:$TAG_NAME
          docker tag $REGISTRY/$MIGRATOR_IMAGE_NAME:latest $REGISTRY/$MIGRATOR_IMAGE_NAME:$TAG_NAME
          docker push $REGISTRY/$SERVER_IMAGE_NAME:$TAG_NAME
          docker push $REGISTRY/$POSTGRES_IMAGE_NAME:$TAG_NAME
          docker push $REGISTRY/$MIGRATOR_IMAGE_NAME:$TAG_NAME
          

  deploy-images:
    runs-on: ubuntu-latest
    needs: images-build-and-push
    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: REGISTRY, GITHUB_SHA,
            SERVER_IMAGE_NAME, SERVER_CONTAINER_NAME,
            POSTGRES_IMAGE_NAME, POSTGRES_CONTAINER_NAME,
            MIGRATOR_IMAGE_NAME, MIGRATOR_CONTAINER_NAME
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Login into Selectel Registry
            echo ${{ secrets.REGISTRY_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin $REGISTRY
            
            # Docker pull
            docker pull $REGISTRY/$SERVER_IMAGE_NAME:$TAG_NAME
            docker pull $REGISTRY/$MIGRATOR_IMAGE_NAME:$TAG_NAME
            
            # Stop running containers
            # docker stop $(docker ps -a -q)
            
            # Remove old containers
            # docker rm $(docker ps -a -q)
            
            # Create docker network
            docker network create server_network
            
            # If it is needed to update db - do it
            if [[ ${{ vars.REBUILD_POSTGRES }} == 'true' ]]; then
              echo "Updating the PostgreSQL container..."
              docker pull $REGISTRY/$POSTGRES_IMAGE_NAME:$TAG_NAME
              docker stop $POSTGRES_CONTAINER_NAME
              docker rm $POSTGRES_CONTAINER_NAME
              # Run postgres container
              docker run -d \
              --name $POSTGRES_CONTAINER_NAME \
              -e "POSTGRES_DB=scam" \
              -e "POSTGRES_USER=postgres" \
              -e "POSTGRES_PASSWORD=${{ secrets.PG_PASSWORD }}" \
              -p "54321:5432" \
              -v postgres_volume:/var/lib/postgresql/data \
              --network server_network \
              $REGISTRY/$POSTGRES_IMAGE_NAME:$TAG_NAME
            else
              echo "No update needed for the PostgreSQL container."
            fi
            docker stop $MIGRATOR_CONTAINER_NAME
            docker rm $MIGRATOR_CONTAINER_NAME
            # Run migrator container
            docker run -d \
            --name $MIGRATOR_CONTAINER_NAME \
            --restart on-failure \
            --network server_network \
            $REGISTRY/$MIGRATOR_IMAGE_NAME:$TAG_NAME
            
            docker stop $SERVER_CONTAINER_NAME
            docker rm $SERVER_CONTAINER_NAME
            # Run server container
            docker run -d \
            --name $SERVER_CONTAINER_NAME \
            -p "${{ secrets.HTTP_PORT }}:${{ secrets.HTTP_PORT }}" \
            -e "CONFIG_PATH=prod.env" \
            --network server_network \
            $REGISTRY/$SERVER_IMAGE_NAME:$TAG_NAME
            
            # Remove old images if necessary
            docker system prune -a -f